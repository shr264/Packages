// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ccdr_cust
NumericMatrix ccdr_cust(NumericMatrix S, NumericMatrix B, double lambda, int maxitr, double tol, bool verbose);
RcppExport SEXP _partial_ccdr_cust(SEXP SSEXP, SEXP BSEXP, SEXP lambdaSEXP, SEXP maxitrSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxitr(maxitrSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ccdr_cust(S, B, lambda, maxitr, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// partial_cust1
NumericMatrix partial_cust1(NumericMatrix S, NumericMatrix B, double lambda, int m, int maxitr, double tol, bool verbose);
RcppExport SEXP _partial_partial_cust1(SEXP SSEXP, SEXP BSEXP, SEXP lambdaSEXP, SEXP mSEXP, SEXP maxitrSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type maxitr(maxitrSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(partial_cust1(S, B, lambda, m, maxitr, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// partial_cust2
NumericMatrix partial_cust2(NumericMatrix S, NumericMatrix B, double lambda, int m, int maxitr, double tol, bool verbose);
RcppExport SEXP _partial_partial_cust2(SEXP SSEXP, SEXP BSEXP, SEXP lambdaSEXP, SEXP mSEXP, SEXP maxitrSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type maxitr(maxitrSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(partial_cust2(S, B, lambda, m, maxitr, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_partial_ccdr_cust", (DL_FUNC) &_partial_ccdr_cust, 6},
    {"_partial_partial_cust1", (DL_FUNC) &_partial_partial_cust1, 7},
    {"_partial_partial_cust2", (DL_FUNC) &_partial_partial_cust2, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_partial(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
